require("dotenv").config();
const { Telegraf, session, Markup } = require("telegraf");
const { MongoClient } = require("mongodb");
const { v4: uuidv4 } = require("uuid");
const fs = require("fs");
const path = require("path");

const MONGO_URI =
  process.env.MONGO_URI ||
  "mongodb+srv://sbp31bot:iR5nObb0cm3JI5hj@sbp31bot.fnh49f1.mongodb.net/AutoPoster?retryWrites=true&w=majority&appName=sbp31bot";
const COVER_PHOTO = path.join(__dirname, "media/cover.jpg");
const ADMIN_ID = 7437546679;
const TRIAL_DAYS = 14;
const ANTISPAM_COOLDOWN = 2000;

const SUBSCRIPTIONS = {
  standard: { minInterval: 300, maxSchedules: 1, vpn: false },
  vip: { minInterval: 90, maxSchedules: 3, vpn: false },
  ultra: { minInterval: 30, maxSchedules: 5, vpn: true },
  trial_expired: { minInterval: Infinity, maxSchedules: 0, vpn: false },
};

let db;
let schedulesCollection;
let usersCollection;
let settingsCollection;
let transactionsCollection;
let intervals = {};
let vpnInterval;
let schedules = [];
let currentVpn = "";
let lastActionTimestamps = new Map();

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.use(async (ctx, next) => {
  const userId = ctx.from?.id;
  if (!userId) return;
  const now = Date.now();
  const lastAction = lastActionTimestamps.get(userId) || 0;
  if (now - lastAction < ANTISPAM_COOLDOWN) {
    await ctx.reply("Gaty k√∂p hereket, gara≈üy≈à! ‚è≥");
    return;
  }
  lastActionTimestamps.set(userId, now);
  await next();
});

bot.use(async (ctx, next) => {
  const userId = ctx.from?.id;
  if (!userId) return;
  const userResult = await getUser(userId);
  if (userResult.success && userResult.data.banned) {
    const banMessage =
      userResult.data.ban_message ||
      "Sen ban boldy≈à, git a≈ày≈àdan √Ωala, √Ωaramaz! ü§¨";
    await ctx.reply(banMessage);
    return;
  }
  await next();
});

bot.use(session());

async function connectMongo() {
  try {
    const client = new MongoClient(MONGO_URI);
    await client.connect();
    db = client.db("AutoPoster");
    schedulesCollection = db.collection("schedules");
    usersCollection = db.collection("users");
    settingsCollection = db.collection("settings");
    transactionsCollection = db.collection("transactions");
    const loadedSchedules = await schedulesCollection.find({}).toArray();
    schedules = loadedSchedules.map((sch) => {
      const newSch = { ...sch, id: sch._id };
      delete newSch._id;
      if (typeof newSch.active === "undefined") newSch.active = true;
      return newSch;
    });
    const vpnSetting = await settingsCollection.findOne({ _id: "current_vpn" });
    currentVpn = vpnSetting ? vpnSetting.value : "";
    console.log(
      "MongoDB baglantysy √ºst√ºnlikli √Ωerine √Ωetirildi, √Ω√ºklenen maslahatlar:",
      schedules.length
    );
    return {
      success: true,
      message: "MongoDB baglantysy √ºst√ºnlikli √Ωerine √Ωetirildi.",
    };
  } catch (err) {
    console.error("MongoDB baglantysy ba≈üarmady:", err.message);
    return {
      success: false,
      message: `MongoDB baglantysy ba≈üarmady: ${err.message}`,
    };
  }
}

async function saveSchedules() {
  try {
    for (const sch of schedules) {
      const updateData = { ...sch };
      delete updateData.id;
      await schedulesCollection.updateOne(
        { _id: sch.id },
        { $set: updateData },
        { upsert: true }
      );
    }
    console.log("Maslahatlar √ºst√ºnlikli √Ωazyldy! üìã");
    return { success: true, message: "Maslahatlar √ºst√ºnlikli √Ωazyldy." };
  } catch (err) {
    console.error("Maslahatlary √Ωazmakda √Ωal≈ày≈ülyk:", err.message);
    return {
      success: false,
      message: `Maslahatlary √Ωazmakda √Ωal≈ày≈ülyk: ${err.message}`,
    };
  }
}

async function initSchedules() {
  try {
    Object.values(intervals).forEach((interval) => clearInterval(interval));
    intervals = {};
    for (const [index, sch] of schedules.entries()) {
      if (!sch.active) continue;
      try {
        await bot.telegram.getChat(sch.chat_id);
        intervals[sch.id] = setInterval(async () => {
          try {
            if (sch.last_message_id) {
              await bot.telegram
                .deleteMessage(sch.chat_id, sch.last_message_id)
                .catch((err) => {
                  console.error(
                    `${sch.chat_id} kanalyny≈à ${sch.last_message_id} ID-li habaryny pozmak ba≈üarmady:`,
                    err.description || err.message
                  );
                });
            }
            let message;
            if (sch.media_url) {
              console.log(
                `${sch.chat_id} kanalyna √Ωaz√Ωar: ${sch.text}, media: ${sch.media_url}`
              );
              message = await bot.telegram.sendPhoto(
                sch.chat_id,
                sch.media_url,
                {
                  caption: sch.text,
                }
              );
            } else {
              console.log(`${sch.chat_id} kanalyna √Ωaz√Ωar: ${sch.text}`);
              message = await bot.telegram.sendMessage(sch.chat_id, sch.text);
            }
            sch.last_message_id = message.message_id;
            await saveSchedules();
          } catch (err) {
            console.error(
              `${sch.chat_id} kanalyna √Ωazmakda √Ωal≈ày≈ülyk:`,
              err.description || err.message
            );
            if (
              err.description.includes("forbidden") ||
              err.description.includes("not allowed")
            ) {
              await bot.telegram.sendMessage(
                sch.user_id,
                `Kanalda ${sch.chat_id} administratory d√§l, administratory et we t√§zeden synan! Wagt gutardy, meni administratory etmegi √Ωatdan √ßykarma≈à! üö´`
              );
            }
            if (err.code === 429) {
              console.log(
                "√á√§k √Ωetdi, 5 sekuntdan so≈à ga√Ωtadan synany≈ü√Ωar... ‚è≥"
              );
              setTimeout(() => {
                if (intervals[sch.id]) intervals[sch.id]();
              }, 5000);
            }
          }
        }, Math.max(sch.interval * 1000, 30000));
      } catch (err) {
        console.error(
          `${index} ID-li maslahaty ${sch.chat_id} kanaly √º√ßin ba≈ülatmak ba≈üarmady:`,
          err.description || err.message
        );
      }
    }
    console.log(
      "Maslahatlar ba≈ülatyldy, i≈üje≈à aralyklar:",
      Object.keys(intervals).length
    );
    return { success: true, message: "Maslahatlar √ºst√ºnlikli ba≈ülatyldy." };
  } catch (err) {
    console.error("Maslahatlary ba≈ülatmak ba≈üarmady:", err.message);
    return {
      success: false,
      message: `Maslahatlary ba≈ülatmak ba≈üarmady: ${err.message}`,
    };
  }
}

async function getUser(userId) {
  let user = await usersCollection.findOne({ _id: userId });
  if (!user) {
    user = {
      _id: userId,
      subscription: "standard",
      expiration: Date.now() + TRIAL_DAYS * 86400000,
      vpn_channel: null,
      last_vpn_sent: null,
      created_at: Date.now(),
      spam_attempts: 0,
      banned: false,
      ban_message: null,
    };
    const result = await usersCollection.insertOne(user);
    if (result.acknowledged) {
      return {
        success: true,
        data: user,
        message: "T√§ze ulanyjy √ºst√ºnlikli d√∂redildi.",
      };
    } else {
      return { success: false, message: "Ulanyjy d√∂retmek ba≈üarmady." };
    }
  }
  if (typeof user.spam_attempts === "undefined") user.spam_attempts = 0;
  if (typeof user.banned === "undefined") user.banned = false;
  if (typeof user.ban_message === "undefined") user.ban_message = null;
  return { success: true, data: user };
}

async function updateUser(user) {
  try {
    const result = await usersCollection.updateOne(
      { _id: user._id },
      { $set: user }
    );
    if (result.matchedCount > 0) {
      return {
        success: true,
        message: "Ulanyjy maglumatlary √ºst√ºnlikli t√§zelendi.",
      };
    } else {
      return { success: false, message: "Ulanyjy tapylmady." };
    }
  } catch (err) {
    return {
      success: false,
      message: `Ulanyjy t√§zelemek ba≈üarmady: ${err.message}`,
    };
  }
}

async function getEffectiveSub(userId) {
  const userResult = await getUser(userId);
  if (!userResult.success) return "trial_expired";
  const user = userResult.data;
  if (user.expiration && user.expiration < Date.now()) {
    user.subscription = "trial_expired";
    user.expiration = null;
    await updateUser(user);
    return "trial_expired";
  }
  return user.subscription;
}

async function setSetting(key, value) {
  try {
    const result = await settingsCollection.updateOne(
      { _id: key },
      { $set: { value } },
      { upsert: true }
    );
    return { success: true, message: "A√Ωratynlyk √ºst√ºnlikli √Ωazyldy." };
  } catch (err) {
    return {
      success: false,
      message: `A√Ωratynlyk √Ωazmak ba≈üarmady: ${err.message}`,
    };
  }
}

function sanitizeInput(input) {
  return input.replace(/[<>${}`]/g, "").trim();
}

async function getMainKeyboard(effectiveSub, isAdmin) {
  let buttons = [["Profil üë§", "D√ºkan üõí"]];
  if (effectiveSub !== "trial_expired") {
    buttons.push(["Maslahat go≈ü üí´", "Maslahatlary g√∂r üìã", "VPNlary g√∂r üìã"]);
    const conditionalButtons = [];
    if (effectiveSub === "ultra" || isAdmin) {
      conditionalButtons.push("VPN go≈ü üåê");
    }
    if (isAdmin) {
      conditionalButtons.push("Panel üéõÔ∏è");
    }
    if (conditionalButtons.length > 0) {
      buttons.push(conditionalButtons);
    }
  }
  return Markup.keyboard(buttons).resize();
}

async function showMainKeyboard(ctx) {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  const isAdmin = ctx.from.id === ADMIN_ID;
  const keyboard = await getMainKeyboard(effectiveSub, isAdmin);
  try {
    await ctx.replyWithPhoto(
      { source: COVER_PHOTO },
      {
        caption:
          effectiveSub === "trial_expired"
            ? "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
            : "Ho≈ü geldi≈àiz! üåü Bir amal sa√Ωla≈à:",
        ...keyboard,
      }
    );
    return { success: true, message: "Ba≈ü men√Ωu √ºst√ºnlikli g√∂rkezildi." };
  } catch (err) {
    console.error("Surat ugratmak ba≈üarmady:", err.message);
    await ctx.reply(
      effectiveSub === "trial_expired"
        ? "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
        : "Bir amal sa√Ωla≈à! üòä",
      keyboard
    );
    return {
      success: false,
      message: `Ba≈ü men√Ωu g√∂rkezmek ba≈üarmady: ${err.message}`,
    };
  }
}

bot.start(async (ctx) => {
  if (ctx.session?.started) return;
  ctx.session = { started: true };
  console.log("Bot ulanyjy √º√ßin ba≈ülady:", ctx.from?.id);
  await getUser(ctx.from.id);
  await showMainKeyboard(ctx);
});

bot.command("pp", async (ctx) => {
  await ctx.reply(
    "Gizlinlik sy√Ωasaty: üìú\n\nBiz sizi≈à maglumatlary≈àyzy howpsuz sakla√Ωarys. Ulanyjy ID-si, abunalyk derejesi, maslahat nastroykalary we be√Ωleki zerur maglumatlar MongoDB bazasynda saklan√Ωar. Bu maglumatlar di≈àe boty≈à dogry i≈ülemegi √º√ßin ulanyl√Ωar we hi√ß ha√ßan √º√ß√ºnji taraplara berilme√Ω√§r. T√∂legler Telegram Stars arkaly amala a≈üyryl√Ωar we Telegramy≈à gizlinlik sy√Ωasaty bo√Ωun√ßa dolandyryl√Ωar. Boty ulanmak bilen, siz bu ≈üertleri kabul ed√Ω√§rsi≈àiz."
  );
});

bot.hears("Profil üë§", async (ctx) => {
  const userId = ctx.from.id;
  const userResult = await getUser(userId);
  if (!userResult.success) {
    await ctx.reply(`√ùal≈ày≈ülyk: ${userResult.message} üòî`);
    return userResult;
  }
  const user = userResult.data;
  const effectiveSub = await getEffectiveSub(userId);
  const subInfo = `üë§ Profil maglumatlary:
Ulanyjy ID: ${user._id}
Abunalyk: ${effectiveSub.charAt(0).toUpperCase() + effectiveSub.slice(1)}
${
  user.expiration
    ? `Gutary≈ü senesi: ${new Date(user.expiration).toLocaleString()}`
    : effectiveSub === "trial_expired"
    ? "√ùagda√Ω: Synag m√∂hleti gutardy üòî\nBoty ulanmak √º√ßin abuna bolu≈à."
    : "Gutary≈ü senesi: √ùok"
}
VPN kanaly: ${user.vpn_channel || "Bellenmedi"}
So≈àky VPN ugradylan: ${
    user.last_vpn_sent
      ? new Date(user.last_vpn_sent).toLocaleString()
      : "Hi√ß ha√ßan"
  }`;
  await ctx.reply(
    subInfo,
    Markup.inlineKeyboard([
      [Markup.button.callback("Meni≈à s√∂wdalarym üí≥", "my_transactions")],
    ])
  );
  return {
    success: true,
    message: "Profil maglumatlary √ºst√ºnlikli g√∂rkezildi.",
  };
});

bot.action("my_transactions", async (ctx) => {
  await ctx.answerCbQuery();
  const userId = ctx.from.id;
  const trans = await transactionsCollection
    .find({ user_id: userId })
    .toArray();
  if (trans.length === 0) {
    await ctx.reply("Hi√ß hili s√∂wda √Ωok. üòî");
    return { success: true, message: "S√∂wda √Ωok." };
  }
  for (const t of trans) {
    const info = `S√∂wda ID: ${t._id}\nDereje: ${
      t.type.charAt(0).toUpperCase() + t.type.slice(1)
    }\nM√∂hlet: ${t.period === "week" ? "Hepde" : "A√Ω"}\nStars: ${
      t.stars
    }\nSene: ${new Date(t.date).toLocaleString()}`;
    await ctx.reply(info);
  }
  return { success: true, message: "S√∂wdalar g√∂rkezildi." };
});

bot.hears("Maslahat go≈ü üí´", async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.reply(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à.",
      Markup.inlineKeyboard([[Markup.button.callback("D√ºkan üõí", "shop")]])
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  ctx.session = { state: "add_channel", started: ctx.session?.started || true };
  await ctx.reply("Kanal ID-ni √Ωazy≈à (mysal: @kanal √Ωa-da -1001234567890): üì¢");
  return {
    success: true,
    message: "Maslahat go≈üma soragy √ºst√ºnlikli i≈üledildi.",
  };
});

bot.hears("Maslahatlary g√∂r üìã", async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.reply(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  let userSchedules;
  const isAdmin = ctx.from.id === ADMIN_ID;
  if (isAdmin) {
    userSchedules = schedules;
  } else {
    userSchedules = schedules.filter((sch) => sch.user_id === ctx.from.id);
  }
  if (userSchedules.length === 0) {
    await ctx.reply("Hi√ß hili maslahat tapylmady. üòî");
    return { success: false, message: "Hi√ß hili maslahat tapylmady." };
  }
  for (const sch of userSchedules) {
    const info = `ID: ${sch.id}${
      isAdmin ? `\nUlanyjy: ${sch.user_id}` : ""
    }\nKanal: ${sch.chat_id}\nWagt aralygy: ${sch.interval} sekunt\nTekst: "${
      sch.text
    }"${sch.media_url ? `\nMedia: ${sch.media_url} üñºÔ∏è` : ""}\nAktiw: ${
      sch.active ? "Hawa" : "√ùok"
    }`;
    await ctx.reply(
      info,
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            sch.active ? "Duruz üõë" : "Ba≈üla ‚ñ∂Ô∏è",
            `toggle_${sch.id}`
          ),
        ],
        [Markup.button.callback("Teksti √º√Ωtget ‚úèÔ∏è", `change_text_${sch.id}`)],
        [
          Markup.button.callback(
            "Wagt aralygyny √º√Ωtget ‚è±Ô∏è",
            `change_interval_${sch.id}`
          ),
        ],
        [Markup.button.callback("Poz üóëÔ∏è", `delete_${sch.id}`)],
      ])
    );
  }
  return { success: true, message: "Maslahatlar √ºst√ºnlikli g√∂rkezildi." };
});

bot.hears("VPNlary g√∂r üìã", async (ctx) => {
  const isAdmin = ctx.from.id === ADMIN_ID;
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub !== "ultra" && !isAdmin) {
    await ctx.reply(
      effectiveSub === "trial_expired"
        ? "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
        : "Bu funksi√Ωa di≈àe Ultra VIP √Ωa-da adminler √º√ßin. üö´"
    );
    return {
      success: false,
      message: "Ultra VIP √Ωa-da admin bolman VPN kanallary g√∂rkezilmez.",
    };
  }
  let vpnChannels = [];
  if (isAdmin) {
    vpnChannels = await usersCollection
      .find({ vpn_channel: { $ne: null } })
      .toArray();
  } else {
    const userResult = await getUser(ctx.from.id);
    if (userResult.success && userResult.data.vpn_channel) {
      vpnChannels = [userResult.data];
    }
  }
  if (vpnChannels.length === 0) {
    await ctx.reply("Hi√ß hili VPN kanaly tapylmady. üòî");
    return { success: false, message: "Hi√ß hili VPN kanaly tapylmady." };
  }
  for (const user of vpnChannels) {
    const info = `Ulanyjy ID: ${user._id}\nVPN kanaly: ${
      user.vpn_channel
    }\nSo≈àky VPN ugradylan: ${
      user.last_vpn_sent
        ? new Date(user.last_vpn_sent).toLocaleString()
        : "Hi√ß ha√ßan"
    }`;
    await ctx.reply(
      info,
      Markup.inlineKeyboard([
        [Markup.button.callback("Poz üóëÔ∏è", `delete_vpn_${user._id}`)],
      ])
    );
  }
  return { success: true, message: "VPN kanallary √ºst√ºnlikli g√∂rkezildi." };
});

bot.hears("VPN go≈ü üåê", async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  const isAdmin = ctx.from.id === ADMIN_ID;
  if (effectiveSub !== "ultra" && !isAdmin) {
    await ctx.reply(
      effectiveSub === "trial_expired"
        ? "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
        : "Bu funksi√Ωa di≈àe Ultra VIP √Ωa-da adminler √º√ßin. üö´"
    );
    return {
      success: false,
      message: "Ultra VIP √Ωa-da admin bolman VPN go≈üup bolmaz.",
    };
  }
  ctx.session = {
    state: "add_vpn_channel",
    started: ctx.session?.started || true,
  };
  await ctx.reply(
    "VPN kanaly≈à ID-ni √Ωazy≈à (mysal: @kanal √Ωa-da -1001234567890): üì¢"
  );
  return {
    success: true,
    message: "VPN kanal go≈üma soragy √ºst√ºnlikli i≈üledildi.",
  };
});

async function showShop(ctx) {
  await ctx.reply(
    "Abunalyk derejesini sa√Ωla≈à: üåü",
    Markup.inlineKeyboard([
      [Markup.button.callback("VIP üëë", "shop_vip")],
      [Markup.button.callback("Ultra VIP üåü", "shop_ultra")],
    ])
  );
}

bot.hears("D√ºkan üõí", showShop);

bot.action("shop", async (ctx) => {
  await ctx.answerCbQuery();
  await showShop(ctx);
});

bot.action("shop_vip", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    `VIP abunalygy m√ºmkin√ßilikleri:\n- I≈à az wagt aralygy: 90 sekunt\n- Maksimum maslahat sany: 3\n- VPN goldawy: √ùok\n\nM√∂hleti sa√Ωla≈à:`,
    Markup.inlineKeyboard([
      [Markup.button.callback("1 Hepde (25 ‚≠ê)", "pay_vip_week")],
      [Markup.button.callback("1 A√Ω (100 ‚≠ê)", "pay_vip_month")],
    ])
  );
});

bot.action("shop_ultra", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply(
    `Ultra VIP abunalygy m√ºmkin√ßilikleri:\n- I≈à az wagt aralygy: 30 sekunt\n- Maksimum maslahat sany: 5\n- VPN goldawy: Hawa\n\nM√∂hleti sa√Ωla≈à:`,
    Markup.inlineKeyboard([
      [Markup.button.callback("1 Hepde (35 ‚≠ê)", "pay_ultra_week")],
      [Markup.button.callback("1 A√Ω (150 ‚≠ê)", "pay_ultra_month")],
    ])
  );
});

bot.action("pay_vip_week", async (ctx) => {
  await ctx.answerCbQuery();
  const title = "VIP abunalygy 1 hepde";
  const desc =
    "VIP abunalygy 1 hepde √º√ßin. T√∂leg etmek bilen, gizlinlik sy√Ωasatymyz bilen ylala≈ü√Ωarsy≈àyz. /pp";
  const payload = JSON.stringify({
    type: "vip",
    period: "week",
    user_id: ctx.from.id,
  });
  const prices = [{ label: "VIP 1 hepde", amount: 25 }];
  await ctx.telegram.sendInvoice(ctx.from.id, {
    title,
    description: desc,
    payload,
    currency: "XTR",
    prices,
    start_parameter: "pay",
    provider_token: "",
  });
});

bot.action("pay_vip_month", async (ctx) => {
  await ctx.answerCbQuery();
  const title = "VIP abunalygy 1 a√Ω";
  const desc =
    "VIP abunalygy 1 a√Ω √º√ßin. T√∂leg etmek bilen, gizlinlik sy√Ωasatymyz bilen ylala≈ü√Ωarsy≈àyz. /pp";
  const payload = JSON.stringify({
    type: "vip",
    period: "month",
    user_id: ctx.from.id,
  });
  const prices = [{ label: "VIP 1 a√Ω", amount: 100 }];
  await ctx.telegram.sendInvoice(ctx.from.id, {
    title,
    description: desc,
    payload,
    currency: "XTR",
    prices,
    start_parameter: "pay",
    provider_token: "",
  });
});

bot.action("pay_ultra_week", async (ctx) => {
  await ctx.answerCbQuery();
  const title = "Ultra VIP abunalygy 1 hepde";
  const desc =
    "Ultra VIP abunalygy 1 hepde √º√ßin. T√∂leg etmek bilen, gizlinlik sy√Ωasatymyz bilen ylala≈ü√Ωarsy≈àyz. /pp";
  const payload = JSON.stringify({
    type: "ultra",
    period: "week",
    user_id: ctx.from.id,
  });
  const prices = [{ label: "Ultra VIP 1 hepde", amount: 35 }];
  await ctx.telegram.sendInvoice(ctx.from.id, {
    title,
    description: desc,
    payload,
    currency: "XTR",
    prices,
    start_parameter: "pay",
    provider_token: "",
  });
});

bot.action("pay_ultra_month", async (ctx) => {
  await ctx.answerCbQuery();
  const title = "Ultra VIP abunalygy 1 a√Ω";
  const desc =
    "Ultra VIP abunalygy 1 a√Ω √º√ßin. T√∂leg etmek bilen, gizlinlik sy√Ωasatymyz bilen ylala≈ü√Ωarsy≈àyz. /pp";
  const payload = JSON.stringify({
    type: "ultra",
    period: "month",
    user_id: ctx.from.id,
  });
  const prices = [{ label: "Ultra VIP 1 a√Ω", amount: 150 }];
  await ctx.telegram.sendInvoice(ctx.from.id, {
    title,
    description: desc,
    payload,
    currency: "XTR",
    prices,
    start_parameter: "pay",
    provider_token: "",
  });
});

bot.on("pre_checkout_query", async (ctx) => {
  await ctx.answerPreCheckoutQuery(true);
});

bot.on("successful_payment", async (ctx) => {
  const payment = ctx.message.successful_payment;
  let payload;
  try {
    payload = JSON.parse(payment.invoice_payload);
  } catch (err) {
    console.error("Payload parse √Ωal≈ày≈ülyk:", err);
    return;
  }
  const days = payload.period === "week" ? 7 : 30;
  const expiration = Date.now() + days * 86400000;
  const userResult = await getUser(payload.user_id);
  if (!userResult.success) return;
  const user = userResult.data;
  user.subscription = payload.type;
  user.expiration = expiration;
  await updateUser(user);
  const trans = {
    _id: uuidv4(),
    user_id: payload.user_id,
    type: payload.type,
    period: payload.period,
    stars: payment.total_amount,
    date: Date.now(),
    telegram_charge_id: payment.telegram_payment_charge_id,
  };
  await transactionsCollection.insertOne(trans);
  await ctx.reply(
    `Sag bolu≈à t√∂legi≈àiz √º√ßin! üéâ\nS√∂wda ID: ${
      trans._id
    }\nAbunalyk: ${payload.type.toUpperCase()} (${
      payload.period === "week" ? "Hepde" : "A√Ω"
    })\nGutary≈ü senesi: ${new Date(expiration).toLocaleString()}`
  );
  await initSchedules();
});

bot.hears("Panel üéõÔ∏è", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.reply("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
    return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
  }
  await ctx.reply(
    "Admin paneline ho≈ü geldi≈àiz! üéõÔ∏è\nA≈üakdaky amallary √Ωerine √Ωetiri≈à:",
    Markup.inlineKeyboard([
      [
        Markup.button.callback("VPN go≈ü üåê", "admin_add_vpn"),
        Markup.button.callback("VPN poz üóëÔ∏è", "admin_delete_vpn"),
      ],
      [Markup.button.callback("Promo go≈ü üéüÔ∏è", "admin_add_promo")],
      [
        Markup.button.callback("Ulanyjy ban et üö´", "admin_ban"),
        Markup.button.callback("Ulanyjy bany a√ß üö™", "admin_unban"),
      ],
      [
        Markup.button.callback(
          "Ban habary bellemek üìù",
          "admin_set_ban_message"
        ),
      ],
      [Markup.button.callback("Stars √ßykar üí∞", "admin_withdraw")],
    ])
  );
  return { success: true, message: "Admin paneli √ºst√ºnlikli g√∂rkezildi." };
});

bot.action("admin_withdraw", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.answerCbQuery("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
    return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
  }
  await ctx.answerCbQuery();
  await ctx.reply(
    "Stars √ßykarmak √º√ßin @PremiumBot-a √Ω√ºz tutu≈à we balansy≈àyzy √ßykary≈à. üí∞"
  );
  return { success: true, message: "√áykarma maglumaty g√∂rkezildi." };
});

bot.action("admin_add_vpn", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.answerCbQuery("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
    return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
  }
  await ctx.answerCbQuery();
  ctx.session = {
    ...ctx.session,
    state: "admin_vpn_config",
    started: ctx.session?.started || true,
  };
  await ctx.reply("VPN konfigurasi√Ωasyny √Ωazy≈à (mysal: vpnblahblah): üåê");
  return {
    success: true,
    message: "VPN konfigurasi√Ωa soragy √ºst√ºnlikli i≈üledildi.",
  };
});

bot.action("admin_delete_vpn", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.answerCbQuery("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
    return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
  }
  await ctx.answerCbQuery();
  const vpnChannels = await usersCollection
    .find({ vpn_channel: { $ne: null } })
    .toArray();
  if (vpnChannels.length === 0) {
    await ctx.reply("Hi√ß hili VPN kanaly tapylmady. üòî");
    return { success: false, message: "Hi√ß hili VPN kanaly tapylmady." };
  }
  for (const user of vpnChannels) {
    const info = `Ulanyjy ID: ${user._id}\nVPN kanaly: ${
      user.vpn_channel
    }\nSo≈àky VPN ugradylan: ${
      user.last_vpn_sent
        ? new Date(user.last_vpn_sent).toLocaleString()
        : "Hi√ß ha√ßan"
    }`;
    await ctx.reply(
      info,
      Markup.inlineKeyboard([
        [Markup.button.callback("Poz üóëÔ∏è", `delete_vpn_${user._id}`)],
      ])
    );
  }
  return { success: true, message: "VPN kanallary √ºst√ºnlikli g√∂rkezildi." };
});

bot.action("admin_add_promo", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.answerCbQuery("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
    return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
  }
  await ctx.answerCbQuery();
  ctx.session = {
    ...ctx.session,
    state: "admin_promo",
    started: ctx.session?.started || true,
  };
  await ctx.reply(
    "Abunalyk g√∂rn√º≈üini, ulanyjy ID-ni we g√ºnleri √Ωazy≈à (mysal: ultra 123456789 30): üéüÔ∏è"
  );
  return { success: true, message: "Promo go≈üma soragy √ºst√ºnlikli i≈üledildi." };
});

bot.action("admin_ban", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.answerCbQuery("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
    return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
  }
  await ctx.answerCbQuery();
  ctx.session = {
    ...ctx.session,
    state: "admin_ban_username",
    started: ctx.session?.started || true,
  };
  await ctx.reply(
    "Ban edilmeli ulanyjyny≈à @adyny √Ωazy≈à (mysal: @username): üö´"
  );
  return { success: true, message: "Ban soragy √ºst√ºnlikli i≈üledildi." };
});

bot.action("admin_unban", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.answerCbQuery("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
    return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
  }
  await ctx.answerCbQuery();
  ctx.session = {
    ...ctx.session,
    state: "admin_unban_username",
    started: ctx.session?.started || true,
  };
  await ctx.reply(
    "Bany a√ßylmaly ulanyjyny≈à @adyny √Ωazy≈à (mysal: @username): üö™"
  );
  return { success: true, message: "Unban soragy √ºst√ºnlikli i≈üledildi." };
});

bot.action("admin_set_ban_message", async (ctx) => {
  if (ctx.from.id !== ADMIN_ID) {
    await ctx.answerCbQuery("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
    return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
  }
  await ctx.answerCbQuery();
  ctx.session = {
    ...ctx.session,
    state: "admin_set_ban_message_username",
    started: ctx.session?.started || true,
  };
  await ctx.reply(
    "Habar bellenmeli ulanyjyny≈à @adyny √Ωazy≈à (mysal: @username): üìù"
  );
  return { success: true, message: "Ban habary soragy √ºst√ºnlikli i≈üledildi." };
});

bot.action("add", async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.answerCbQuery(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  await ctx.answerCbQuery();
  ctx.session = { state: "add_channel", started: ctx.session?.started || true };
  await ctx.reply("Kanal ID-ni √Ωazy≈à (mysal: @kanal √Ωa-da -1001234567890): üì¢");
  return {
    success: true,
    message: "Maslahat go≈üma soragy √ºst√ºnlikli i≈üledildi.",
  };
});

bot.action("list", async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.answerCbQuery(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  await ctx.answerCbQuery();
  let userSchedules;
  const isAdmin = ctx.from.id === ADMIN_ID;
  if (isAdmin) {
    userSchedules = schedules;
  } else {
    userSchedules = schedules.filter((sch) => sch.user_id === ctx.from.id);
  }
  if (userSchedules.length === 0) {
    await ctx.reply("Hi√ß hili maslahat tapylmady. üòî", {
      reply_markup: Markup.inlineKeyboard([
        [Markup.button.callback("Maslahat go≈ü üí´", "add")],
        [Markup.button.callback("Maslahatlary g√∂r üìã", "list")],
      ]),
    });
    return { success: false, message: "Hi√ß hili maslahat tapylmady." };
  }
  for (const sch of userSchedules) {
    const info = `ID: ${sch.id}${
      isAdmin ? `\nUlanyjy: ${sch.user_id}` : ""
    }\nKanal: ${sch.chat_id}\nWagt aralygy: ${sch.interval} sekunt\nTekst: "${
      sch.text
    }"${sch.media_url ? `\nMedia: ${sch.media_url} üñºÔ∏è` : ""}\nAktiw: ${
      sch.active ? "Hawa" : "√ùok"
    }`;
    await ctx.reply(
      info,
      Markup.inlineKeyboard([
        [
          Markup.button.callback(
            sch.active ? "Duruz üõë" : "Ba≈üla ‚ñ∂Ô∏è",
            `toggle_${sch.id}`
          ),
        ],
        [Markup.button.callback("Teksti √º√Ωtget ‚úèÔ∏è", `change_text_${sch.id}`)],
        [
          Markup.button.callback(
            "Wagt aralygyny √º√Ωtget ‚è±Ô∏è",
            `change_interval_${sch.id}`
          ),
        ],
        [Markup.button.callback("Poz üóëÔ∏è", `delete_${sch.id}`)],
      ])
    );
  }
  return { success: true, message: "Maslahatlar √ºst√ºnlikli g√∂rkezildi." };
});

bot.action(/^toggle_(.+)$/, async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.answerCbQuery(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  const id = ctx.match[1];
  const sch = schedules.find((s) => s.id === id);
  if (!sch || (sch.user_id !== ctx.from.id && ctx.from.id !== ADMIN_ID)) {
    await ctx.answerCbQuery("Bu maslahat size degi≈üli d√§l. üö´");
    return { success: false, message: "Bu maslahat size degi≈üli d√§l." };
  }
  sch.active = !sch.active;
  const saveResult = await saveSchedules();
  if (!saveResult.success) {
    await ctx.answerCbQuery(
      "√ùal≈ày≈ülyk: Maslahat √Ωagda√Ωyny √º√Ωtgetmek ba≈üarmady. üòî"
    );
    return saveResult;
  }
  const initResult = await initSchedules();
  if (!initResult.success) {
    await ctx.answerCbQuery("√ùal≈ày≈ülyk: Maslahatlary ba≈ülatmak ba≈üarmady. üòî");
    return initResult;
  }
  await ctx.answerCbQuery(`√ùagda√Ω: ${sch.active ? "Aktiw" : "Passiw"}`);
  const isAdmin = ctx.from.id === ADMIN_ID;
  const newInfo = `ID: ${sch.id}${
    isAdmin ? `\nUlanyjy: ${sch.user_id}` : ""
  }\nKanal: ${sch.chat_id}\nWagt aralygy: ${sch.interval} sekunt\nTekst: "${
    sch.text
  }"${sch.media_url ? `\nMedia: ${sch.media_url} üñºÔ∏è` : ""}\nAktiw: ${
    sch.active ? "Hawa" : "√ùok"
  }`;
  await ctx.editMessageText(
    newInfo,
    Markup.inlineKeyboard([
      [
        Markup.button.callback(
          sch.active ? "Duruz üõë" : "Ba≈üla ‚ñ∂Ô∏è",
          `toggle_${sch.id}`
        ),
      ],
      [Markup.button.callback("Teksti √º√Ωtget ‚úèÔ∏è", `change_text_${sch.id}`)],
      [
        Markup.button.callback(
          "Wagt aralygyny √º√Ωtget ‚è±Ô∏è",
          `change_interval_${sch.id}`
        ),
      ],
      [Markup.button.callback("Poz üóëÔ∏è", `delete_${sch.id}`)],
    ])
  );
  return { success: true, message: "Maslahat √Ωagda√Ωy √ºst√ºnlikli √º√Ωtgedildi." };
});

bot.action(/^change_text_(.+)$/, async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.answerCbQuery(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  const id = ctx.match[1];
  const sch = schedules.find((s) => s.id === id);
  if (!sch || (sch.user_id !== ctx.from.id && ctx.from.id !== ADMIN_ID)) {
    await ctx.answerCbQuery("Bu maslahat size degi≈üli d√§l. üö´");
    return { success: false, message: "Bu maslahat size degi≈üli d√§l." };
  }
  ctx.session = { ...ctx.session, state: "change_text", change_id: id };
  await ctx.answerCbQuery();
  await ctx.reply("T√§ze tekst √Ωazy≈à: ‚úçÔ∏è");
  return {
    success: true,
    message: "Tekst √º√Ωtgetme soragy √ºst√ºnlikli i≈üledildi.",
  };
});

bot.action(/^change_interval_(.+)$/, async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.answerCbQuery(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  const id = ctx.match[1];
  const sch = schedules.find((s) => s.id === id);
  if (!sch || (sch.user_id !== ctx.from.id && ctx.from.id !== ADMIN_ID)) {
    await ctx.answerCbQuery("Bu maslahat size degi≈üli d√§l. üö´");
    return { success: false, message: "Bu maslahat size degi≈üli d√§l." };
  }
  ctx.session = { ...ctx.session, state: "change_interval", change_id: id };
  await ctx.answerCbQuery();
  await ctx.reply("T√§ze wagt aralygyny sekuntlarda √Ωazy≈à: ‚è±Ô∏è");
  return {
    success: true,
    message: "Wagt aralygyny √º√Ωtgetme soragy √ºst√ºnlikli i≈üledildi.",
  };
});

bot.action(/^delete_(.+)$/, async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.answerCbQuery(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  const id = ctx.match[1];
  const sch = schedules.find((s) => s.id === id);
  if (!sch || (sch.user_id !== ctx.from.id && ctx.from.id !== ADMIN_ID)) {
    await ctx.answerCbQuery("Bu maslahat size degi≈üli d√§l. üö´");
    return { success: false, message: "Bu maslahat size degi≈üli d√§l." };
  }
  if (intervals[id]) {
    clearInterval(intervals[id]);
    delete intervals[id];
  }
  const index = schedules.findIndex((s) => s.id === id);
  schedules.splice(index, 1);
  try {
    await schedulesCollection.deleteOne({ _id: id });
    const initResult = await initSchedules();
    if (!initResult.success) {
      await ctx.answerCbQuery(
        "√ùal≈ày≈ülyk: Maslahatlary ba≈ülatmak ba≈üarmady. üòî"
      );
      return initResult;
    }
    await ctx.answerCbQuery("Pozuldy. üóëÔ∏è");
    await ctx.deleteMessage();
    return { success: true, message: "Maslahat √ºst√ºnlikli pozuldy." };
  } catch (err) {
    await ctx.answerCbQuery("√ùal≈ày≈ülyk: Maslahat pozmak ba≈üarmady. üòî");
    return {
      success: false,
      message: `Maslahat pozmak ba≈üarmady: ${err.message}`,
    };
  }
});

bot.action(/^delete_vpn_(.+)$/, async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.answerCbQuery(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  const userId = parseInt(ctx.match[1], 10);
  const isAdmin = ctx.from.id === ADMIN_ID;
  if (userId !== ctx.from.id && !isAdmin) {
    await ctx.answerCbQuery("Bu VPN kanaly size degi≈üli d√§l. üö´");
    return { success: false, message: "Bu VPN kanaly size degi≈üli d√§l." };
  }
  const userResult = await getUser(userId);
  if (!userResult.success) {
    await ctx.answerCbQuery(`√ùal≈ày≈ülyk: ${userResult.message} üòî`);
    return userResult;
  }
  const user = userResult.data;
  user.vpn_channel = null;
  user.last_vpn_sent = null;
  const updateResult = await updateUser(user);
  if (!updateResult.success) {
    await ctx.answerCbQuery(`√ùal≈ày≈ülyk: ${updateResult.message} üòî`);
    return updateResult;
  }
  await ctx.answerCbQuery("VPN kanaly pozuldy. üóëÔ∏è");
  await ctx.deleteMessage();
  return { success: true, message: "VPN kanaly √ºst√ºnlikli pozuldy." };
});

bot.on("text", async (ctx) => {
  const state = ctx.session?.state;
  const userId = ctx.from.id;
  const effectiveSub = await getEffectiveSub(userId);
  if (!state) {
    console.log("Sessiya √Ωagda√Ωy tapylmady, ulanyjy:", ctx.from?.id);
    await showMainKeyboard(ctx);
    return { success: false, message: "Sessiya √Ωagda√Ωy tapylmady." };
  }
  if (effectiveSub === "trial_expired") {
    await ctx.reply(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    ctx.session = { started: ctx.session.started };
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  const subConfig = SUBSCRIPTIONS[effectiveSub];
  if (state === "add_channel") {
    const chat_id = sanitizeInput(ctx.message.text);
    if (!chat_id.match(/^(@[a-zA-Z0-9_]+|-100\d+)$/)) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply(
        "N√§dogry kanal ID formaty (mysal: @kanal √Ωa-da -1001234567890). üö´"
      );
      await showMainKeyboard(ctx);
      return { success: false, message: "N√§dogry kanal ID formaty." };
    }
    if (schedules.some((sch) => sch.chat_id === chat_id)) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply(
        `Bu kanal (@${chat_id} √Ωa-da ${chat_id}) √º√ßin e√Ω√Ω√§m maslahat bar. Bir kanalda di≈àe bir maslahat bolup biler. üòî`
      );
      await showMainKeyboard(ctx);
      return { success: false, message: "Kanalda e√Ω√Ω√§m maslahat bar." };
    }
    const userSchedules = schedules.filter(
      (sch) => sch.user_id === userId
    ).length;
    if (userSchedules >= subConfig.maxSchedules) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply(
        `Sizi≈à abunalyk derej√§≈àiz bo√Ωun√ßa maksimum ${subConfig.maxSchedules} maslahat go≈üup bilersi≈àiz. üòî`
      );
      await showMainKeyboard(ctx);
      return { success: false, message: "Maksimum maslahat sany doldu." };
    }
    const userResult = await getUser(userId);
    const user = userResult.data;
    try {
      const admins = await bot.telegram.getChatAdministrators(chat_id);
      const botInfo = await bot.telegram.getMe();
      const botId = botInfo.id;
      const isBotAdmin = admins.some(
        (admin) =>
          admin.user.id === botId &&
          admin.can_post_messages &&
          admin.can_delete_messages
      );
      if (!isBotAdmin) {
        ctx.session = { started: ctx.session.started };
        await ctx.reply(
          "Bot kanal administratory d√§l √Ωa-da √Ωeterlik ygty√Ωarlar √Ωok. Boty administratory edip go≈üu≈à we √Ωazgy we pozmak hukugyny beri≈à. So≈à t√§zeden synan. üö´"
        );
        await showMainKeyboard(ctx);
        return { success: false, message: "Bot administratory d√§l." };
      }
      const owner = admins.find((admin) => admin.status === "creator");
      if (!owner || owner.user.id !== userId) {
        user.spam_attempts += 1;
        await updateUser(user);
        const remaining = 3 - user.spam_attempts;
        if (user.spam_attempts >= 3) {
          user.banned = true;
          await updateUser(user);
          await ctx.reply(
            "Ba≈üga birini≈à kanalyny spam etmek synany≈üygy≈àyz seb√§pli ban boldy≈àyz! Git a≈ày≈àdan √Ωala! ü§¨"
          );
          return { success: false, message: "Ulanyjy ban edildi." };
        } else {
          ctx.session = { started: ctx.session.started };
          await ctx.reply(
            `Ba≈üga birini≈à kanalyny spam etmek isle√Ω√§rsi≈àiz! Size ${remaining} synany≈üyk galdy. üö´`
          );
          await showMainKeyboard(ctx);
          return { success: false, message: "Spam synany≈üygy." };
        }
      }
    } catch (err) {
      console.error("Kanal adminlerini almak ba≈üarmady:", err.message);
      ctx.session = { started: ctx.session.started };
      await ctx.reply(
        "Bot kanal agzasy d√§l √Ωa-da adminleri almak ba≈üarmady. Boty kanal agzasy we administratory edip go≈üu≈à. So≈à t√§zeden synan. üö´"
      );
      await showMainKeyboard(ctx);
      return { success: false, message: "Kanal adminlerini almak ba≈üarmady." };
    }
    ctx.session.add = { chat_id };
    ctx.session.state = "add_text";
    await ctx.reply("Habary≈à tekstini √Ωazy≈à: ‚úçÔ∏è");
    return { success: true, message: "Kanal ID √ºst√ºnlikli kabul edildi." };
  } else if (state === "add_text") {
    const text = sanitizeInput(ctx.message.text);
    if (!text) {
      await ctx.reply("Tekst bo≈ü bolmaly d√§l. üö´");
      return { success: false, message: "Tekst bo≈ü bolmaly d√§l." };
    }
    ctx.session.add.text = text;
    ctx.session.state = "add_interval";
    await ctx.reply(
      `Wagt aralygyny sekuntlarda √Ωazy≈à (i≈à az ${subConfig.minInterval}): ‚è±Ô∏è`
    );
    return { success: true, message: "Tekst √ºst√ºnlikli kabul edildi." };
  } else if (state === "add_interval") {
    const interval = parseInt(ctx.message.text.trim(), 10);
    if (isNaN(interval) || interval < subConfig.minInterval) {
      await ctx.reply(
        `Wagt aralygy ${subConfig.minInterval} sekuntdan az bolmaly d√§l. T√§zeden synan: ‚è≥`
      );
      return { success: false, message: "N√§dogry wagt aralygy." };
    }
    const addData = ctx.session.add;
    addData.interval = interval;
    addData.media_url = null;
    addData.last_message_id = null;
    addData.id = uuidv4();
    addData.user_id = ctx.from.id;
    addData.active = true;
    try {
      await bot.telegram.getChat(addData.chat_id);
      schedules.push(addData);
      const saveResult = await saveSchedules();
      if (!saveResult.success) {
        await ctx.reply(`√ùal≈ày≈ülyk: ${saveResult.message} üòî`);
        ctx.session = { started: ctx.session.started };
        await showMainKeyboard(ctx);
        return saveResult;
      }
      const initResult = await initSchedules();
      if (!initResult.success) {
        await ctx.reply(`√ùal≈ày≈ülyk: ${initResult.message} üòî`);
        ctx.session = { started: ctx.session.started };
        await showMainKeyboard(ctx);
        return initResult;
      }
      await ctx.reply(`Maslahat √ºst√ºnlikli go≈üuldy, ID: ${addData.id} üéâ`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: true, message: "Maslahat √ºst√ºnlikli go≈üuldy." };
    } catch (err) {
      console.error(
        `${addData.chat_id} kanaly √º√ßin maslahat go≈ümak ba≈üarmady:`,
        err.description || err.message
      );
      await ctx.reply(
        `Maslahat go≈ümak ba≈üarmady: ${err.description || err.message} üòî`
      );
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return {
        success: false,
        message: `Maslahat go≈ümak ba≈üarmady: ${err.message}`,
      };
    }
  } else if (state === "change_text") {
    const id = ctx.session.change_id;
    const sch = schedules.find((s) => s.id === id);
    if (!sch || (sch.user_id !== ctx.from.id && ctx.from.id !== ADMIN_ID)) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply("Bu maslahat size degi≈üli d√§l. üö´");
      return { success: false, message: "Bu maslahat size degi≈üli d√§l." };
    }
    const text = sanitizeInput(ctx.message.text);
    if (!text) {
      await ctx.reply("Tekst bo≈ü bolmaly d√§l. üö´");
      return { success: false, message: "Tekst bo≈ü bolmaly d√§l." };
    }
    sch.text = text;
    const saveResult = await saveSchedules();
    if (!saveResult.success) {
      await ctx.reply(`√ùal≈ày≈ülyk: ${saveResult.message} üòî`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return saveResult;
    }
    ctx.session = { started: ctx.session.started };
    await ctx.reply("Tekst t√§zelendi. üéâ");
    await showMainKeyboard(ctx);
    return { success: true, message: "Tekst √ºst√ºnlikli t√§zelendi." };
  } else if (state === "change_interval") {
    const id = ctx.session.change_id;
    const sch = schedules.find((s) => s.id === id);
    if (!sch || (sch.user_id !== ctx.from.id && ctx.from.id !== ADMIN_ID)) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply("Bu maslahat size degi≈üli d√§l. üö´");
      return { success: false, message: "Bu maslahat size degi≈üli d√§l." };
    }
    const interval = parseInt(ctx.message.text.trim(), 10);
    if (isNaN(interval) || interval < subConfig.minInterval) {
      await ctx.reply(
        `Wagt aralygy ${subConfig.minInterval} sekuntdan az bolmaly d√§l. T√§zeden synan: ‚è≥`
      );
      return { success: false, message: "N√§dogry wagt aralygy." };
    }
    sch.interval = interval;
    const saveResult = await saveSchedules();
    if (!saveResult.success) {
      await ctx.reply(`√ùal≈ày≈ülyk: ${saveResult.message} üòî`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return saveResult;
    }
    const initResult = await initSchedules();
    if (!initResult.success) {
      await ctx.reply(`√ùal≈ày≈ülyk: ${initResult.message} üòî`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return initResult;
    }
    ctx.session = { started: ctx.session.started };
    await ctx.reply("Wagt aralygy t√§zelendi. üéâ");
    await showMainKeyboard(ctx);
    return { success: true, message: "Wagt aralygy √ºst√ºnlikli t√§zelendi." };
  } else if (state === "add_vpn_channel") {
    const isAdmin = ctx.from.id === ADMIN_ID;
    if (effectiveSub !== "ultra" && !isAdmin) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply(
        effectiveSub === "trial_expired"
          ? "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
          : "Bu funksi√Ωa di≈àe Ultra VIP √Ωa-da adminler √º√ßin. üö´"
      );
      return {
        success: false,
        message: "Ultra VIP √Ωa-da admin bolman VPN kanal go≈üup bolmaz.",
      };
    }
    const channel = sanitizeInput(ctx.message.text);
    if (!channel.match(/^(@[a-zA-Z0-9_]+|-100\d+)$/)) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply(
        "N√§dogry kanal ID formaty (mysal: @kanal √Ωa-da -1001234567890). üö´"
      );
      await showMainKeyboard(ctx);
      return { success: false, message: "N√§dogry kanal ID formaty." };
    }
    try {
      await bot.telegram.getChat(channel);
      const userResult = await getUser(userId);
      if (!userResult.success) {
        await ctx.reply(`√ùal≈ày≈ülyk: ${userResult.message} üòî`);
        return userResult;
      }
      const user = userResult.data;
      user.vpn_channel = channel;
      user.last_vpn_sent = null;
      const updateResult = await updateUser(user);
      if (!updateResult.success) {
        await ctx.reply(`√ùal≈ày≈ülyk: ${updateResult.message} üòî`);
        return updateResult;
      }
      if (currentVpn) {
        try {
          await bot.telegram.sendMessage(channel, currentVpn);
          user.last_vpn_sent = Date.now();
          await updateUser(user);
          console.log(`VPN ${channel} kanalyna ugradyldy, ulanyjy: ${userId}`);
        } catch (err) {
          await ctx.reply(
            `VPN ugratmak ba≈üarmady: ${err.description || err.message} üòî`
          );
          console.error(
            `VPN ${channel} kanalyna ugratmak ba≈üarmady:`,
            err.message
          );
        }
      }
      await ctx.reply("VPN kanaly √ºst√ºnlikli go≈üuldy! üéâ");
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: true, message: "VPN kanaly √ºst√ºnlikli go≈üuldy." };
    } catch (err) {
      await ctx.reply(`N√§dogry kanal ID: ${err.description || err.message} üö´`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: false, message: `N√§dogry kanal ID: ${err.message}` };
    }
  } else if (state === "admin_vpn_config") {
    if (ctx.from.id !== ADMIN_ID) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
      return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
    }
    const vpnConfig = sanitizeInput(ctx.message.text);
    if (!vpnConfig) {
      await ctx.reply("VPN konfigurasi√Ωasyny √Ωazy≈à (mysal: vpnblahblah). üö´");
      return { success: false, message: "VPN konfigurasi√Ωasy berilmedi." };
    }
    currentVpn = vpnConfig;
    const setResult = await setSetting("current_vpn", vpnConfig);
    if (!setResult.success) {
      await ctx.reply(`√ùal≈ày≈ülyk: ${setResult.message} üòî`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return setResult;
    }
    await ctx.reply("VPN konfigurasi√Ωasy t√§zelendi. üéâ");
    ctx.session = { started: ctx.session.started };
    await showMainKeyboard(ctx);
    return {
      success: true,
      message: "VPN konfigurasi√Ωasy √ºst√ºnlikli t√§zelendi.",
    };
  } else if (state === "admin_promo") {
    if (ctx.from.id !== ADMIN_ID) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
      return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
    }
    const [, type, userIdStr, daysStr] =
      ctx.message.text.match(/(\w+)\s+(\d+)\s+(\d+)/) || [];
    if (!type || !userIdStr || !daysStr) {
      await ctx.reply("N√§dogry format. Mysal: ultra 123456789 30 üö´");
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: false, message: "N√§dogry bu√Ωruk formaty." };
    }
    if (!["vip", "ultra", "standard"].includes(type)) {
      await ctx.reply(
        "N√§dogry abunalyk g√∂rn√º≈üi: vip, ultra √Ωa-da standard. üö´"
      );
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: false, message: "N√§dogry abunalyk g√∂rn√º≈üi." };
    }
    const targetUserId = parseInt(userIdStr, 10);
    const days = parseInt(daysStr, 10);
    if (isNaN(targetUserId) || isNaN(days)) {
      await ctx.reply("N√§dogry ulanyjy ID √Ωa-da g√ºn sany. üö´");
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: false, message: "N√§dogry ulanyjy ID √Ωa-da g√ºn sany." };
    }
    const targetUserResult = await getUser(targetUserId);
    if (!targetUserResult.success) {
      await ctx.reply(`√ùal≈ày≈ülyk: ${targetUserResult.message} üòî`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return targetUserResult;
    }
    const targetUser = targetUserResult.data;
    targetUser.subscription = type;
    targetUser.expiration = days > 0 ? Date.now() + days * 86400000 : null;
    const updateResult = await updateUser(targetUser);
    if (!updateResult.success) {
      await ctx.reply(`√ùal≈ày≈ülyk: ${updateResult.message} üòî`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return updateResult;
    }
    await ctx.reply(
      `Ulanyjy ${targetUserId} abunalygy ${type} boldy, ${days} g√ºn. üéâ`
    );
    ctx.session = { started: ctx.session.started };
    await showMainKeyboard(ctx);
    return { success: true, message: "Abunalyk √ºst√ºnlikli t√§zelendi." };
  } else if (state === "admin_ban_username") {
    if (ctx.from.id !== ADMIN_ID) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
      return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
    }
    const username = sanitizeInput(ctx.message.text);
    if (!username.startsWith("@")) {
      await ctx.reply("N√§dogry format. Mysal: @username. T√§zeden synan. üö´");
      return { success: false, message: "N√§dogry username formaty." };
    }
    try {
      const chat = await bot.telegram.getChat(username);
      if (chat.type !== "private") {
        await ctx.reply("Bu ulanyjy d√§l, kanal √Ωa-da topary≈à ady. üö´");
        return { success: false, message: "N√§dogry chat tipleri." };
      }
      const targetUserId = chat.id;
      const targetUserResult = await getUser(targetUserId);
      if (!targetUserResult.success) {
        await ctx.reply(`√ùal≈ày≈ülyk: ${targetUserResult.message} üòî`);
        ctx.session = { started: ctx.session.started };
        await showMainKeyboard(ctx);
        return targetUserResult;
      }
      const targetUser = targetUserResult.data;
      targetUser.banned = true;
      const updateResult = await updateUser(targetUser);
      if (!updateResult.success) {
        await ctx.reply(`√ùal≈ày≈ülyk: ${updateResult.message} üòî`);
        ctx.session = { started: ctx.session.started };
        await showMainKeyboard(ctx);
        return updateResult;
      }
      await ctx.reply(`Ulanyjy ${username} ban edildi. üö´`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: true, message: "Ulanyjy √ºst√ºnlikli ban edildi." };
    } catch (err) {
      await ctx.reply(
        `Ulanyjy tapylmady √Ωa-da √Ωal≈ày≈ülyk: ${
          err.description || err.message
        } üö´`
      );
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: false, message: `Ulanyjy tapylmady: ${err.message}` };
    }
  } else if (state === "admin_unban_username") {
    if (ctx.from.id !== ADMIN_ID) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
      return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
    }
    const username = sanitizeInput(ctx.message.text);
    if (!username.startsWith("@")) {
      await ctx.reply("N√§dogry format. Mysal: @username. T√§zeden synan. üö´");
      return { success: false, message: "N√§dogry username formaty." };
    }
    try {
      const chat = await bot.telegram.getChat(username);
      if (chat.type !== "private") {
        await ctx.reply("Bu ulanyjy d√§l, kanal √Ωa-da topary≈à ady. üö´");
        return { success: false, message: "N√§dogry chat tipleri." };
      }
      const targetUserId = chat.id;
      const targetUserResult = await getUser(targetUserId);
      if (!targetUserResult.success) {
        await ctx.reply(`√ùal≈ày≈ülyk: ${targetUserResult.message} üòî`);
        ctx.session = { started: ctx.session.started };
        await showMainKeyboard(ctx);
        return targetUserResult;
      }
      const targetUser = targetUserResult.data;
      targetUser.banned = false;
      const updateResult = await updateUser(targetUser);
      if (!updateResult.success) {
        await ctx.reply(`√ùal≈ày≈ülyk: ${updateResult.message} üòî`);
        ctx.session = { started: ctx.session.started };
        await showMainKeyboard(ctx);
        return updateResult;
      }
      await ctx.reply(`Ulanyjy ${username} bany a√ßyldy. üö™`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: true, message: "Ulanyjy √ºst√ºnlikli unban edildi." };
    } catch (err) {
      await ctx.reply(
        `Ulanyjy tapylmady √Ωa-da √Ωal≈ày≈ülyk: ${
          err.description || err.message
        } üö´`
      );
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: false, message: `Ulanyjy tapylmady: ${err.message}` };
    }
  } else if (state === "admin_set_ban_message_username") {
    if (ctx.from.id !== ADMIN_ID) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
      return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
    }
    const username = sanitizeInput(ctx.message.text);
    if (!username.startsWith("@")) {
      await ctx.reply("N√§dogry format. Mysal: @username. T√§zeden synan. üö´");
      return { success: false, message: "N√§dogry username formaty." };
    }
    try {
      const chat = await bot.telegram.getChat(username);
      if (chat.type !== "private") {
        await ctx.reply("Bu ulanyjy d√§l, kanal √Ωa-da topary≈à ady. üö´");
        return { success: false, message: "N√§dogry chat tipleri." };
      }
      const targetUserId = chat.id;
      const targetUserResult = await getUser(targetUserId);
      if (!targetUserResult.success) {
        await ctx.reply(`√ùal≈ày≈ülyk: ${targetUserResult.message} üòî`);
        ctx.session = { started: ctx.session.started };
        await showMainKeyboard(ctx);
        return targetUserResult;
      }
      ctx.session.target_user_id_for_message = targetUserId;
      ctx.session.state = "admin_set_ban_message_text";
      await ctx.reply("Ulanyjy √º√ßin ban habaryny √Ωazy≈à: üìù");
      return { success: true, message: "Ban habary tekst soragy i≈üledildi." };
    } catch (err) {
      await ctx.reply(
        `Ulanyjy tapylmady √Ωa-da √Ωal≈ày≈ülyk: ${
          err.description || err.message
        } üö´`
      );
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: false, message: `Ulanyjy tapylmady: ${err.message}` };
    }
  } else if (state === "admin_set_ban_message_text") {
    if (ctx.from.id !== ADMIN_ID) {
      ctx.session = { started: ctx.session.started };
      await ctx.reply("Bu funksi√Ωa di≈àe adminler √º√ßin. üö´");
      return { success: false, message: "Ygty√Ωarsyz funksi√Ωa." };
    }
    const message = sanitizeInput(ctx.message.text);
    if (!message) {
      await ctx.reply("Habar bo≈ü bolmaly d√§l. üö´");
      return { success: false, message: "Habar bo≈ü bolmaly d√§l." };
    }
    const targetUserId = ctx.session.target_user_id_for_message;
    if (!targetUserId) {
      await ctx.reply("√ùal≈ày≈ülyk: Ulanyjy tapylmady. üòî");
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return { success: false, message: "Ulanyjy tapylmady." };
    }
    const targetUserResult = await getUser(targetUserId);
    if (!targetUserResult.success) {
      await ctx.reply(`√ùal≈ày≈ülyk: ${targetUserResult.message} üòî`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return targetUserResult;
    }
    const targetUser = targetUserResult.data;
    targetUser.ban_message = message;
    const updateResult = await updateUser(targetUser);
    if (!updateResult.success) {
      await ctx.reply(`√ùal≈ày≈ülyk: ${updateResult.message} üòî`);
      ctx.session = { started: ctx.session.started };
      await showMainKeyboard(ctx);
      return updateResult;
    }
    await ctx.reply(`Ulanyjy √º√ßin ban habary bellenildi. üìù`);
    ctx.session = { started: ctx.session.started };
    await showMainKeyboard(ctx);
    return { success: true, message: "Ban habary √ºst√ºnlikli bellenildi." };
  }
  return { success: false, message: "Bilinmedik √Ωagda√Ω." };
});

bot.hears(/^maslahaty t√§zele\s+(\S+)\s+([^\s]+)\s+"([^"]+)"$/i, async (ctx) => {
  const effectiveSub = await getEffectiveSub(ctx.from.id);
  if (effectiveSub === "trial_expired") {
    await ctx.reply(
      "Synag m√∂hleti≈àiz gutardy! üòî Boty ulanmak √º√ßin abuna bolu≈à."
    );
    return { success: false, message: "Synag m√∂hleti gutardy." };
  }
  const [, id, field, value] = ctx.match;
  const sch = schedules.find((s) => s.id === id);
  if (!sch || (sch.user_id !== ctx.from.id && ctx.from.id !== ADMIN_ID)) {
    await ctx.reply("Bu maslahat size degi≈üli d√§l. üö´");
    return { success: false, message: "Bu maslahat size degi≈üli d√§l." };
  }
  const index = schedules.findIndex((s) => s.id === id);
  if (
    index === -1 ||
    !["chat_id", "text", "interval", "media_url"].includes(field)
  ) {
    await ctx.reply(
      "N√§dogry ID √Ωa-da me√Ωdan. Me√Ωdanlar: chat_id, text, interval, media_url üö´"
    );
    return { success: false, message: "N√§dogry ID √Ωa-da me√Ωdan." };
  }
  const effectiveSubConfig = SUBSCRIPTIONS[effectiveSub];
  if (field === "chat_id") {
    const sanitizedValue = sanitizeInput(value);
    if (!sanitizedValue.match(/^(@[a-zA-Z0-9_]+|-100\d+)$/)) {
      await ctx.reply(
        "N√§dogry kanal ID formaty (mysal: @kanal √Ωa-da -1001234567890). üö´"
      );
      return { success: false, message: "N√§dogry kanal ID formaty." };
    }
    if (
      schedules.some((sch) => sch.chat_id === sanitizedValue && sch.id !== id)
    ) {
      await ctx.reply(
        `Bu kanal (@${sanitizedValue} √Ωa-da ${sanitizedValue}) √º√ßin e√Ω√Ω√§m maslahat bar. Bir kanalda di≈àe bir maslahat bolup biler. üòî`
      );
      return { success: false, message: "Kanalda e√Ω√Ω√§m maslahat bar." };
    }
    try {
      await bot.telegram.getChat(sanitizedValue);
      schedules[index][field] = sanitizedValue;
    } catch (err) {
      await ctx.reply(`N√§dogry kanal ID: ${err.description || err.message} üö´`);
      return { success: false, message: `N√§dogry kanal ID: ${err.message}` };
    }
  } else if (field === "interval") {
    const intValue = parseInt(value, 10);
    if (isNaN(intValue) || intValue < effectiveSubConfig.minInterval) {
      await ctx.reply(
        `Wagt aralygy ${effectiveSubConfig.minInterval} sekuntdan az bolmaly d√§l. üòî`
      );
      return { success: false, message: "N√§dogry wagt aralygy." };
    }
    schedules[index][field] = intValue;
  } else if (field === "text") {
    const sanitizedValue = sanitizeInput(value);
    if (!sanitizedValue) {
      await ctx.reply("Tekst bo≈ü bolmaly d√§l. üö´");
      return { success: false, message: "Tekst bo≈ü bolmaly d√§l." };
    }
    schedules[index][field] = sanitizedValue;
  } else {
    schedules[index][field] =
      field === "media_url" && value === "null" ? null : sanitizeInput(value);
  }
  const saveResult = await saveSchedules();
  if (!saveResult.success) {
    await ctx.reply(`√ùal≈ày≈ülyk: ${saveResult.message} üòî`);
    return saveResult;
  }
  const initResult = await initSchedules();
  if (!initResult.success) {
    await ctx.reply(`√ùal≈ày≈ülyk: ${initResult.message} üòî`);
    return initResult;
  }
  await ctx.reply(`Maslahat ${id} t√§zelendi. üéâ`);
  await showMainKeyboard(ctx);
  return { success: true, message: "Maslahat √ºst√ºnlikli t√§zelendi." };
});

bot.catch((err, ctx) => {
  console.error(`Global √Ωal≈ày≈ülyk ${ctx.updateType}:`, err.message, err.stack);
  ctx.reply("√ùal≈ày≈ülyk √Ω√ºze √ßykdy. T√§zeden synan. üòî");
  return { success: false, message: `Global √Ωal≈ày≈ülyk: ${err.message}` };
});

(async () => {
  try {
    const connectResult = await connectMongo();
    if (!connectResult.success) {
      console.error(connectResult.message);
      process.exit(1);
    }
    const initResult = await initSchedules();
    if (!initResult.success) {
      console.error(initResult.message);
      process.exit(1);
    }
    vpnInterval = setInterval(async () => {
      const ultraUsers = await usersCollection
        .find({ subscription: "ultra" })
        .toArray();
      for (const user of ultraUsers) {
        const effectiveSub = await getEffectiveSub(user._id);
        if (effectiveSub !== "ultra") continue;
        if (
          user.vpn_channel &&
          currentVpn &&
          (!user.last_vpn_sent || Date.now() - user.last_vpn_sent > 604800000)
        ) {
          try {
            await bot.telegram.sendMessage(user.vpn_channel, currentVpn);
            user.last_vpn_sent = Date.now();
            const updateResult = await updateUser(user);
            if (!updateResult.success) {
              console.error(
                `Ulanyjy ${user._id} t√§zelemek ba≈üarmady:`,
                updateResult.message
              );
            } else {
              console.log(
                `VPN ${user.vpn_channel} kanalyna ugradyldy, ulanyjy: ${user._id}`
              );
            }
          } catch (err) {
            console.error(
              `VPN ${user.vpn_channel} kanalyna ugratmak ba≈üarmady:`,
              err.message
            );
          }
        }
      }
    }, 3600000);
    bot.launch();
    console.log("Bot i≈ül√§p ba≈ülady... üöÄ");
  } catch (err) {
    console.error("Boty ba≈ülatmak ba≈üarmady:", err.message);
    process.exit(1);
  }
})();

process.once("SIGINT", async () => {
  console.log("SIGINT aldy, bot duruzyl√Ωar...");
  Object.values(intervals).forEach((interval) => clearInterval(interval));
  clearInterval(vpnInterval);
  bot.stop("SIGINT");
});

process.once("SIGTERM", async () => {
  console.log("SIGTERM aldy, bot duruzyl√Ωar...");
  Object.values(intervals).forEach((interval) => clearInterval(interval));
  clearInterval(vpnInterval);
  bot.stop("SIGTERM");
});
